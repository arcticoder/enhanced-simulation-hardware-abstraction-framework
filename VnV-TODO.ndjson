{"task":"Test QuantumFieldOperator._initialize_field_grid correctness","priority":"High","source_file":"src/quantum_field_manipulator.py","source_file_lines":"70:90","source_snippet":"def _initialize_field_grid","python_snippet":"import numpy as np\nfrom quantum_field_manipulator import QuantumFieldOperator, QuantumFieldConfig\nconfig = QuantumFieldConfig(field_resolution=8, field_extent=2.0)\nqfo = QuantumFieldOperator(config)\ngrid = qfo.field_grid\nassert grid.shape == (8,8,8,3)"}
{"task":"Validate vacuum state normalization in QuantumFieldOperator","priority":"Medium","source_file":"src/quantum_field_manipulator.py","source_file_lines":"100:120","source_snippet":"def _initialize_vacuum_state","python_snippet":"import numpy as np; from quantum_field_manipulator import QuantumFieldOperator, QuantumFieldConfig; qfo = QuantumFieldOperator(QuantumFieldConfig(field_resolution=8)); state = qfo.vacuum_state; assert np.all(state != None)"}
{"task":"Verify creation and annihilation operator commutation relations","priority":"High","source_file":"src/quantum_field_manipulator.py","source_file_lines":"130:150","source_snippet":"self.creation_operators, self.annihilation_operators initialization","python_snippet":"# test [a, aâ€ ] = 1 for single mode"}
